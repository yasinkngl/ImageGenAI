.
  public
    favicon.ico
      ---- File Content ----
      [Binary File - Content Not Displayed]
    index.html
      ---- File Content ----
      <!DOCTYPE html>
      <html lang="en">
      <head>
      <meta charset="utf-8" />
      <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <meta name="theme-color" content="#000000" />
      <meta
      name="description"
      content="Web site created using create-react-app"
      />
      <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
      <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
      -->
      <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
      <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.
      
      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
      -->
      <title>React App</title>
      </head>
      <body>
      <noscript>You need to enable JavaScript to run this app.</noscript>
      <div id="root"></div>
      <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.
      
      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.
      
      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
      -->
      </body>
      </html>
      ---------------------
    logo192.png
      ---- File Content ----
      [Binary File - Content Not Displayed]
    logo512.png
      ---- File Content ----
      [Binary File - Content Not Displayed]
    robots.txt
      ---- File Content ----
      # https://www.robotstxt.org/robotstxt.html
      User-agent: *
      Disallow:
      ---------------------
  README.md
    ---- File Content ----
    # Getting Started with Create React App
    
    This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).
    
    ## Available Scripts
    
    In the project directory, you can run:
    
    ### `npm start`
    
    Runs the app in the development mode.\
    Open [http://localhost:3000](http://localhost:3000) to view it in your browser.
    
    The page will reload when you make changes.\
    You may also see any lint errors in the console.
    
    ### `npm test`
    
    Launches the test runner in the interactive watch mode.\
    See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.
    
    ### `npm run build`
    
    Builds the app for production to the `build` folder.\
    It correctly bundles React in production mode and optimizes the build for the best performance.
    
    The build is minified and the filenames include the hashes.\
    Your app is ready to be deployed!
    
    See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.
    
    ### `npm run eject`
    
    **Note: this is a one-way operation. Once you `eject`, you can't go back!**
    
    If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.
    
    Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.
    
    You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.
    
    ## Learn More
    
    You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).
    
    To learn React, check out the [React documentation](https://reactjs.org/).
    
    ### Code Splitting
    
    This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)
    
    ### Analyzing the Bundle Size
    
    This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)
    
    ### Making a Progressive Web App
    
    This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)
    
    ### Advanced Configuration
    
    This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)
    
    ### Deployment
    
    This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)
    
    ### `npm run build` fails to minify
    
    This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)
    ---------------------
  server
    .env
      ---- File Content ----
      MONGODB_URI=mongodb+srv://yamelux:123123Ma%3F@ai-imagegen-cluster.wksz6.mongodb.net/?retryWrites=true&w=majority&appName=ai-imagegen-cluster
      PORT=5000
      ---------------------
    models
      Prompt.js
        ---- File Content ----
        // server/models/Prompt.js
        
        const mongoose = require('mongoose');
        
        const promptSchema = new mongoose.Schema({
        prompt: { type: String, required: true },
        imageUrl: { type: String, required: true },
        createdAt: { type: Date, default: Date.now },
        });
        
        module.exports = mongoose.model('Prompt', promptSchema);
        ---------------------
    server.js
      ---- File Content ----
      // server/server.js
      
      const express = require('express');
      const mongoose = require('mongoose');
      const cors = require('cors');
      const dotenv = require('dotenv');
      
      // Load environment variables
      dotenv.config();
      
      const app = express();
      
      // Middleware
      app.use(cors({
      origin: 'http://localhost:3000', // Allow only the frontend URL
      }));
      app.use(express.json());
      
      // Connect to MongoDB
      mongoose.connect(process.env.MONGODB_URI, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      })
      .then(() => console.log('MongoDB connected'))
      .catch(err => console.error('MongoDB connection error:', err));
      
      // Define the Prompt schema and model
      const promptSchema = new mongoose.Schema({
      prompt: { type: String, required: true },
      imageUrl: { type: String, required: true },
      createdAt: { type: Date, default: Date.now },
      });
      
      const Prompt = require('./models/Prompt');
      
      // Routes
      
      // Get all prompts (sorted by newest first)
      app.get('/api/prompts', async (req, res) => {
      try {
      const prompts = await Prompt.find().sort({ createdAt: -1 });
      res.json(prompts);
      } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Server Error' });
      }
      });
      
      // Add a new prompt
      
      app.post('/api/prompts', async (req, res) => {
      const { prompt, imageUrl } = req.body;
      
      if (!prompt || !imageUrl) {
      return res.status(400).json({ message: 'Prompt and Image URL are required.' });
      }
      
      try {
      const newPrompt = new Prompt({ prompt, imageUrl });
      await newPrompt.save();
      res.status(201).json(newPrompt);
      } catch (err) {
      console.error(err);
      res.status(500).json({ message: 'Server Error' });
      }
      });
      
      
      // Start the server
      const PORT = process.env.PORT || 5000;
      app.listen(PORT, () => {
      console.log(`Server is running on port ${PORT}`);
      });
      ---------------------
  src
    App.css
      ---- File Content ----
      /* App.css */
      .App {
      width: 100%;
      max-width: 1200px;
      margin: 0 auto;
      padding: 1rem;
      display: flex;
      justify-content: center;
      align-items: flex-start; /* Let the card sit near the top instead of exact center */
      }
      ---------------------
    App.js
      ---- File Content ----
      import React from 'react';
      import './App.css';
      import ImageGenerator from './components/ImageGenerator';
      
      function App() {
      return (
      <div className="App">
      <ImageGenerator />
      </div>
      );
      }
      
      export default App;
      ---------------------
    App.test.js
      ---- File Content ----
      import { render, screen } from '@testing-library/react';
      import App from './App';
      
      test('renders learn react link', () => {
      render(<App />);
      const linkElement = screen.getByText(/learn react/i);
      expect(linkElement).toBeInTheDocument();
      });
      ---------------------
    components
      ErrorMessage.css
        ---- File Content ----
        /* ErrorMessage.css */
        .error-message {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        background: #ff4d4f;
        color: #fff;
        padding: 0.75rem 1rem;
        border-radius: 4px;
        margin-top: 1rem;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
        }
        
        .error-icon {
        margin-right: 0.5rem;
        font-size: 1.3rem;
        }
        ---------------------
      ErrorMessage.jsx
        ---- File Content ----
        import React from 'react';
        import './ErrorMessage.css';
        import { FaExclamationTriangle } from 'react-icons/fa';
        
        const ErrorMessage = ({ message }) => {
        return (
        <div className="error-message">
        <FaExclamationTriangle className="error-icon" />
        <span>{message}</span>
        </div>
        );
        };
        
        export default ErrorMessage;
        ---------------------
      ImageGenerator.css
        ---- File Content ----
        /* ImageGenerator.css */
        
        .image-generator {
        background: #242627;
        padding: 2rem;
        max-width: 800px;
        width: 100%;
        border-radius: 16px;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.6);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin: 2rem auto;
        }
        
        .image-generator:hover {
        transform: translateY(-3px);
        box-shadow: 0 12px 32px rgba(0, 0, 0, 0.7);
        }
        
        .image-generator h1 {
        margin-bottom: 0.5rem;
        font-weight: 700;
        font-size: 2.2rem;
        color: #ffffff;
        text-align: center;
        }
        
        .image-generator .subheader {
        margin-bottom: 2rem;
        font-size: 1rem;
        color: #b4b6b8;
        text-align: center;
        max-width: 600px;
        margin-left: auto;
        margin-right: auto;
        }
        
        .prompt-form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        margin-bottom: 1rem;
        align-items: stretch;
        }
        
        @media (min-width: 480px) {
        .prompt-form {
        flex-direction: row;
        }
        }
        
        .prompt-input {
        flex: 1;
        padding: 0.75rem 1rem;
        font-size: 1rem;
        border: 2px solid #333;
        background-color: #181a1b;
        color: #ececec;
        border-radius: 8px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
        font-family: 'Inter', sans-serif;
        }
        
        .prompt-input::placeholder {
        color: #888;
        }
        
        .prompt-input:focus {
        border-color: #00b894;
        box-shadow: 0 0 0 3px rgba(0, 184, 148, 0.2);
        outline: none;
        }
        
        .generate-button {
        background: #00b894;
        color: #ffffff;
        border: none;
        border-radius: 8px;
        font-size: 1rem;
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        transition: background 0.3s ease, transform 0.2s ease, box-shadow 0.3s ease;
        font-family: 'Inter', sans-serif;
        align-self: center;
        }
        
        .generate-button:hover {
        background: #00cea2;
        transform: scale(1.03);
        box-shadow: 0 8px 16px rgba(0, 206, 162, 0.2);
        }
        
        .generate-button:disabled {
        background: #555;
        cursor: not-allowed;
        }
        
        .smart-suggestion {
        margin-top: 0.5rem;
        font-size: 0.95rem;
        font-style: italic;
        color: #b4b6b8;
        text-align: center;
        }
        
        .image-preview {
        margin-top: 2rem;
        position: relative;
        display: flex;
        justify-content: center;
        }
        
        .image-preview img {
        max-width: 100%;
        height: auto;
        border-radius: 12px;
        box-shadow: 0 6px 14px rgba(0, 0, 0, 0.5);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        object-fit: cover;
        }
        
        .image-preview img:hover {
        transform: scale(1.02);
        box-shadow: 0 12px 28px rgba(0, 0, 0, 0.6);
        }
        
        /* Prompt History Section */
        .prompt-history {
        margin-top: 3rem;
        text-align: left;
        }
        
        .prompt-history h2 {
        color: #2f3640;
        font-size: 1.8rem;
        margin-bottom: 1rem;
        font-family: 'Poppins', sans-serif;
        }
        
        .prompt-history ul {
        list-style: none;
        padding: 0;
        }
        
        .history-item {
        background: #f9f9f9;
        padding: 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);
        transition: background 0.3s ease;
        }
        
        .history-item:hover {
        background: #f1f1f1;
        }
        
        .history-item p {
        margin-bottom: 0.5rem;
        font-family: 'Open Sans', sans-serif;
        }
        
        .history-item img {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        ---------------------
      ImageGenerator.jsx
        ---- File Content ----
        import React, { useState, useEffect } from 'react';
        import './ImageGenerator.css';
        import LoadingSpinner from './LoadingSpinner';
        import ErrorMessage from './ErrorMessage';
        import axios from 'axios';
        
        const ImageGenerator = () => {
        // State for user input prompt
        const [prompt, setPrompt] = useState('');
        // State for the generated image URL
        const [imageUrl, setImageUrl] = useState('');
        // State to track loading status
        const [isLoading, setIsLoading] = useState(false);
        // State for error messages
        const [error, setError] = useState('');
        // State for prompt history
        const [history, setHistory] = useState([]);
        
        // Fetch prompt history on component mount
        useEffect(() => {
        fetchHistory();
        }, []);
        
        const fetchHistory = async () => {
        try {
        const response = await axios.get('http://localhost:5000/api/prompts');
        setHistory(response.data);
        } catch (err) {
        console.error('Error fetching history:', err);
        setError('Failed to fetch prompt history.');
        }
        };
        
        // Handler for prompt input changes
        const handlePromptChange = (event) => {
        setPrompt(event.target.value);
        };
        
        // Handler for the form submission
        const handleSubmit = async (event) => {
        event.preventDefault();
        setError(''); // Reset any previous errors
        
        if (!prompt.trim()) {
        setError('Please enter a valid prompt.');
        return;
        }
        
        try {
        setIsLoading(true);
        // Construct the Pollinations endpoint URL
        const encodedPrompt = encodeURIComponent(prompt.trim().replace(/\s+/g, '-'));
        const url = `https://image.pollinations.ai/prompt/${encodedPrompt}`;
        
        // To prevent caching, append a timestamp
        const finalUrl = `${url}?t=${Date.now()}`;
        
        // Set the generated image URL
        setImageUrl(finalUrl);
        
        // Save the prompt and image URL to the backend
        const newPrompt = { prompt: prompt.trim(), imageUrl: finalUrl };
        await axios.post('http://localhost:5000/api/prompts', newPrompt);
        
        // Update the history state
        setHistory([newPrompt, ...history]);
        
        // Clear the input field
        setPrompt('');
        } catch (err) {
        console.error('Error generating image:', err);
        setError('Failed to generate image. Please try again.');
        } finally {
        setIsLoading(false);
        }
        };
        
        return (
        <div className="image-generator">
        <h1>AI ImageGen</h1>
        <p className="subheader">
        Inspirational images from the top AI generators. Simply enter a subject, we'll apply styles, and you'll tweak the one you like.
        </p>
        <form onSubmit={handleSubmit} className="prompt-form">
        <input
        type="text"
        placeholder="Enter your prompt..."
        value={prompt}
        onChange={handlePromptChange}
        className="prompt-input"
        aria-label="Text prompt"
        />
        <button type="submit" className="generate-button" disabled={isLoading}>
        {isLoading ? 'Generating...' : 'Generate'}
        </button>
        </form>
        <p className="smart-suggestion">
        Smart Suggestion: Focus on detailed subject descriptions, rather than style.
        </p>
        
        {error && <ErrorMessage message={error} />}
        
        {isLoading && <LoadingSpinner />}
        
        {imageUrl && !isLoading && !error && (
        <div className="image-preview">
        <img
        src={imageUrl}
        alt="Generated visual representation"
        loading="lazy"
        onLoad={() => {}}
        onError={() => setError('Failed to load image. Please try a different prompt.')}
        />
        </div>
        )}
        
        {/* Prompt History Section */}
        <div className="prompt-history">
        <h2>Prompt History</h2>
        {history.length === 0 ? (
        <p>No prompts yet.</p>
        ) : (
        <ul>
        {history.map((item, index) => (
        <li key={index} className="history-item">
        <p><strong>Prompt:</strong> {item.prompt}</p>
        <img src={item.imageUrl} alt={`Generated for ${item.prompt}`} />
        </li>
        ))}
        </ul>
        )}
        </div>
        </div>
        );
        };
        
        export default ImageGenerator;
        ---------------------
      LoadingSpinner.css
        ---- File Content ----
        /* LoadingSpinner.css */
        .loading-spinner {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 1.5rem;
        }
        
        .spinner {
        font-size: 2rem;
        animation: spin 1s linear infinite;
        color: #00b894;
        }
        
        @keyframes spin {
        to { transform: rotate(360deg); }
        }
        
        .loading-spinner p {
        margin-top: 0.5rem;
        font-size: 1rem;
        color: #ececec;
        }
        ---------------------
      LoadingSpinner.jsx
        ---- File Content ----
        import React from 'react';
        import './LoadingSpinner.css';
        import { FaSpinner } from 'react-icons/fa';
        
        const LoadingSpinner = () => {
        return (
        <div className="loading-spinner">
        <FaSpinner className="spinner" />
        <p>Generating image...</p>
        </div>
        );
        };
        
        export default LoadingSpinner;
        ---------------------
    index.css
      ---- File Content ----
      /* index.css */
      
      /* Import Google Fonts */
      @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap');
      
      /* Reset some basic styles */
      * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      }
      
      /* Global background in dark mode */
      body {
      font-family: 'Inter', sans-serif;
      background: #181a1b;
      color: #ececec;
      line-height: 1.6;
      transition: background 0.3s ease, color 0.3s ease;
      min-height: 100vh;
      margin: 0;
      display: flex;
      flex-direction: column;
      }
      
      /* Optional: Smooth scroll */
      html {
      scroll-behavior: smooth;
      }
      
      /* Root container to center the app */
      #root {
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 2rem;
      }
      ---------------------
    index.js
      ---- File Content ----
      import React from 'react';
      import ReactDOM from 'react-dom/client';
      import './index.css';
      import App from './App';
      
      const root = ReactDOM.createRoot(document.getElementById('root'));
      root.render(
      <React.StrictMode>
      <App />
      </React.StrictMode>
      );
      ---------------------
    logo.svg
      ---- File Content ----
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
      ---------------------
